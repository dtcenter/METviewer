setwd("#<r_work>#");

source("include/Compute_STDerr.R");
source("include/util_plot.R");



strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#
boolDumpPoints1  = #<dump_points1>#;
boolDumpPoints2  = #<dump_points2>#;

boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;

boolVertPlot  = #<vert_plot>#;

strIndyVar    = "#<indy_var>#";

listIndy = #<indy_list>#;

listIndyPlotVal = #<indy_plot_val>#;

listDep1Plot = #<dep1_plot>#;


listAggVal = #<agg_list>#;

listSeries1Val = #<series1_list>#;


listFixedValEx = #<fix_val_list_eq>#;

listDep1Scale = #<dep1_scale>#;


listLegendUsr = #<legend>#;

strPlotStat = "#<plot_stat>#";

listDiffSeries1=#<series1_diff_list>#;


listColors = #<colors>#;
listPch = #<pch>#;
listType = #<type>#;
listLty = #<lty>#;
listLwd = #<lwd>#;
listConSeries = #<con_series>#;

colorPalette = #<color_palette>#;
contourIntervals = #<contour_intervals>#;
reverseX = #<reverse_x>#;
reverseY = #<reverse_y>#;
addColorBar = #<add_color_bar>#;
addContourOverlay = #<add_contour_overlay>#;

indyLabel = #<indy_label>#;
mgp=#<mgp>#;
cex=#<cex>#;

listY1limUsr  = #<y1_lim>#;

listLegendUsr = #<legend>#;

#
#  Build the series data for the plot
#

#if fcst_var is a special char - read it as-is and do not convert
sampleData = read.delim(strDataFile,nrows=5);
classes <- sapply(sampleData, class);
numeric_columns <- c('stat_value', 'stat_bcl', 'stat_bcu', 'stat_ncu', 'stat_ncl','fbs', 'fss');
integer_columns <- c('fcst_lead','nstats');
character_columns <- c('fcst_var', 'model', 'stat_name', 'object_id', 'cluster_id', 'object_cat');
for(col in 1:ncol(sampleData)){
  if ( is.element( names(classes)[col] , numeric_columns) ){
    classes[col]='numeric';
  } else if ( is.element( names(classes)[col] , integer_columns) ){
    classes[col]='integer';
  } else if ( is.element( names(classes)[col] , character_columns) ){
    classes[col]='character';
  }
}

dfPlot = read.delim(strDataFile,colClasses = classes);
if(nrow(dfPlot) == 0)  stop("No data to build the plot")
stopifnot(nrow(dfPlot) > 0)


# run event equalizer, if requested
if( FALSE != boolEventEqual ){

  dfPlot1 = data.frame();
  #list all fixed variables
  listFixVars=c();
  listFixVarVals = c();
  if(length(listFixedValEx) > 0){
    for(index in 1:length(listFixedValEx)){
      if(is.null(listFixVars)){
        listFixVars = names(listFixedValEx[index]);
        listFixVarVals = permute(listFixedValEx[index]);
      }else{
        listFixVars = append(listFixVars, names(listFixedValEx[index]));
        listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
      }
    }
  }

  for( strDep1Name in names(listDep1Plot) ){
    for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
      fPlot = dfPlot;
      for(strSeriesVal in names(listSeries1Val)){
        vectValPerms = c();
        for(index in 1:length(listSeries1Val[[strSeriesVal]])){
          vectValPerms= append(vectValPerms, strsplit(listSeries1Val[[strSeriesVal]][index], ",")[[1]]);
        }
        fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep1Stat, ];
      }
      fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
      dfPlot = rbind(dfPlot1, fPlot);
    }

  }


  dfPlot = dfPlot;

  strAfrerEqualizeFile = sub("\\.data$", ".dataAfterEq", strDataFile, perl=TRUE);
  write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");

}

legend = c( paste(names(listDep1Plot)[1], listDep1Plot[[names(listDep1Plot)[1]]], sep = " "));

#add Y1 DIFF series - if exist
if(length(listDiffSeries1) > 0){

  for( diffSeries1Name in 1: length(listDiffSeries1) ){ #1,2....

    #get  names of DIFF series
    diffSeriesVec = listDiffSeries1[[diffSeries1Name]];
    derivedCurveName = getDerivedCurveName(diffSeriesVec);
    #check if the input frame already has diff series  ( from calculation agg stats )
    listSeriesVar = names(listFixedValEx);
    derivedVar1=''
    derivedVar2=''
    derivedVarVal1=tail(unlist(strsplit(diffSeriesVec[1], ' ')), n=1)
    derivedVarVal2=tail(unlist(strsplit(diffSeriesVec[2], ' ')), n=1)


    for ( index in 1:length(listFixedValEx)) {
      name =names(listFixedValEx[index])
      if(derivedVarVal1 %in%  unlist(permute(listFixedValEx[index]))){
        derivedVar1 = name;
      }
      if(derivedVarVal2 %in%  unlist(permute(listFixedValEx[index]))){
        derivedVar2 = name;
      }
    }

    #add derived field to the list of series vars
    listSeriesVal = listSeries1Val;
    listSeriesVal[[derivedVar1]] = listFixedValEx[[derivedVar1]][[names(listFixedValEx[[derivedVar1]])]];
    if( derivedVar1 != derivedVar2){
      listSeriesVal[[derivedVar2]] = listFixedValEx[[derivedVar2]][[names(listFixedValEx[[derivedVar2]])]];
    }
    listSeriesVar = names(listSeriesVal);


    for(var in listSeriesVar){
      dfStatsIndy = dfPlot[dfPlot[[var]] == derivedCurveName ,];
    }
    if(nrow(dfStatsIndy) == 0){

      #get plot data to calculate DIFF
      plotData1 = dfPlot[dfPlot[[derivedVar1]] == derivedVarVal1 , ];
      plotData2 = dfPlot[dfPlot[[derivedVar2]] == derivedVarVal2 , ];

      plotDataDiff=list();
      listFields = names(plotData1);
      for(indy in listIndy){

        for (seriesVal in listSeries1Val[[names(listSeries1Val)]]) {
          dfStatsIndy = plotData1[plotData1[[strIndyVar]] == indy & plotData1[[names(listSeries1Val)]] == seriesVal ,];
          dfStatsIndy2 = plotData2[plotData2[[strIndyVar]] == indy & plotData2[[names(listSeries1Val)]] == seriesVal ,];
          if ("fcst_valid_beg" %in% listFields) {
            uniqueDates = nrow(unique(dfStatsIndy[c("fcst_valid_beg", "fcst_lead", "stat_name")]))
          } else if ("fcst_valid" %in% listFields) {
            uniqueDates = nrow(unique(dfStatsIndy[c("fcst_valid", "fcst_lead", "stat_name")]))
          } else if ("fcst_init_beg" %in% listFields) {
            uniqueDates = nrow(unique(dfStatsIndy[c("fcst_init_beg", "fcst_lead", "stat_name")]))
          } else {
            uniqueDates = nrow(unique(dfStatsIndy[c("fcst_init", "fcst_lead", "stat_name")]))
          }
          if (nrow(dfStatsIndy) != uniqueDates) {
            stop("Derived curve can't be calculated. Multiple values for one valid date/fcst_lead")
          }

          #sort data
          if ("fcst_valid_beg" %in% listFields) {
            dfStatsIndy = dfStatsIndy[order(dfStatsIndy$fcst_valid_beg, dfStatsIndy$fcst_lead, dfStatsIndy1$stat_name),];
            dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_valid_beg, dfStatsIndy2$fcst_lead, dfStatsIndy2$stat_name),];
          }
          if ("fcst_valid" %in% listFields) {
            dfStatsIndy = dfStatsIndy[order(dfStatsIndy$fcst_valid, dfStatsIndy$fcst_lead, dfStatsIndy1$stat_name),];
            dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_valid, dfStatsIndy2$fcst_lead, dfStatsIndy2$stat_name),];
          }
          if ("fcst_init_beg" %in% listFields) {
            dfStatsIndy = dfStatsIndy[order(dfStatsIndy$fcst_init_beg, dfStatsIndy$fcst_lead, dfStatsIndy1$stat_name),];
            dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_init_beg, dfStatsIndy2$fcst_lead, dfStatsIndy2$stat_name),];
          }
          if ("fcst_init" %in% listFields) {
            dfStatsIndy = dfStatsIndy[order(dfStatsIndy$fcst_init, dfStatsIndy$fcst_lead, dfStatsIndy1$stat_name),];
            dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_init, dfStatsIndy2$fcst_lead, dfStatsIndy2$stat_name),];
          }

          dfStatsIndy$stat_value = calcDerivedCurveValue(dfStatsIndy$stat_value, dfStatsIndy2$stat_value, derivedCurveName);


          if (length(names(plotDataDiff)) == 0) {
            plotDataDiff = dfStatsIndy;
          }else{
            plotDataDiff = merge(plotDataDiff,dfStatsIndy,all=TRUE);
          }
        }
      }
      dfPlot = plotDataDiff
    }else{
      dfPlot = dfStatsIndy;
    }
  }
  legend = c( paste(names(listDep1Plot)[1], listDep1Plot[[names(listDep1Plot)[1]]], listDiffSeries1[[1]][3], sep = " ") );
}


if( reverseX){
  x_real = rev(listIndy)
  indyLabel = rev(indyLabel)
}else{
  x_real = listIndy;
}
if(reverseY){
  y_real = rev(listSeries1Val[[names(listSeries1Val)[1]]])
}else{
  y_real = listSeries1Val[[names(listSeries1Val)[1]]]
}

if( boolVertPlot ){
  x_temp = x_real;
  x_real = y_real;
  y_real = x_temp;
}

x=1:length(x_real)
y=1:length(y_real)

z = matrix(NA, length(x_real), length(y_real))

for(i in 1:length(x_real)) {
  for(j in 1:length(y_real)) {
    if( boolVertPlot ){
      ind = (dfPlot[[strIndyVar]]==y_real[j] & dfPlot[[names(listSeries1Val)[1]]]==x_real[i])
    }else{
      ind = (dfPlot[[strIndyVar]]==x_real[i] & dfPlot[[names(listSeries1Val)[1]]]==y_real[j])
    }
    if("mean" == strPlotStat){
      z[i,j] = mean(dfPlot$stat_value[ind], na.rm = TRUE);
    }else if("sum" == strPlotStat){
      z[i,j] = sum(dfPlot$stat_value[ind],na.rm = TRUE);
    } else {
      # use median if strPlotStat = 'median' or anything else since 'median' is the default
      z[i,j] = median(dfPlot$stat_value[ind],na.rm = TRUE);
    }
  }
}



if( 0 < length(listY1limUsr) ){
  zlim = c(listY1limUsr[1],listY1limUsr[2]);
} else {
  zlim = c(min(z, na.rm = TRUE),max(z, na.rm = TRUE))
}


#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      legend[index]=listLegendUsr[index];
    }
  }
}


# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
    strPlotFile,            # output file name, with appropriate extension
    width=#<plot_width>#,	  # width of the display region, in specified units
    height=#<plot_height>#,	# height of the display region, in specified units
    res=#<plot_res>#,		    # resolution, in dots per inch
    units="#<plot_units>#",  # units for height and width
    pointsize = 12,
    quality = 100
  );
} else {
  bitmap(
    strPlotFile,            # output file name, with appropriate extension
    type="#<plot_type>#",   # type of bitmap
    width=#<plot_width>#,	  # width of the display region, in specified units
    height=#<plot_height>#,	# height of the display region, in specified units
    res=#<plot_res>#,		    # resolution, in dots per inch
    units="#<plot_units>#", # units for height and width
    taa=4,                  # bits of anti-aliasing for graphics
    gaa=4                   # bits of anti-aliasing for text
  );
}


plot.new()
# specify plot window formatting
mar = #<mar>#;

par(
  new = "TRUE",
  mar=mar+0.1,      # lines of margin in form c(bottom, left, top, right)
  mgp=mgp,          # margin line for axis title, axis labels and axis line in form c(title, labels, line)
  cex=cex,          # magnification for plot text
  las=2             # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);

# plot title
mtext(
  "#<plot_title>#",       # label
  font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=3,                 # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<title_size>#,		  # relative magnification
  padj=#<title_offset>#,	# axis label perpendicular location adjustment
  adj=#<title_align>#,	  # axis label parallel location adjustment
  line=1                  # margin line, starting at 0 counting outwards
);


if(addColorBar){
  mar[4] = mar[4] + 5.5
}
par(
  new = "TRUE",
  mar=mar+0.1, # lines of margin in form c(bottom, left, top, right)
  mgp=mgp, # margin line for axis title, axis labels and axis line in form c(title, labels, line)
  cex=cex, # magnification for plot text
  las=2 # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);



filled.contour3(x=x, y=y, z=z, color.palette = colorPalette, nlevels = contourIntervals, axes =FALSE, zlim=zlim);
if(addContourOverlay){
  contour(x=x, y=y, z=z, add=T, drawlabels=T, method='flattest', col=listColors[1],
    lty=listLty[1], lwd=listLwd[1],nlevels = contourIntervals, zlim=zlim)
}

y1_label = "#<y1_label>#"
x_label = "#<x_label>#"

if( boolVertPlot ){
  labelsX=x_real
  labelsY=indyLabel
  xAxisLabel = y1_label
  yAxisLabel = x_label
}else{
  labelsX=indyLabel
  labelsY=y_real
  xAxisLabel = x_label
  yAxisLabel = y1_label
}

# specify the x-axis
axis(
  1,                        # axis of interest, 1: below, 2: left, 3: above and 4: right
  at=x,                     # locations of tick marks
  labels=labelsX,         # axis labels
  tick=TRUE,                # tick marks on/off
  tck=.01,                  # length of tick marks as a fraction of plot window
  las=#<xtlab_orient>#,	    # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<xtlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<xtlab_horiz>#,     # axis label parallel location adjustment
  cex.axis=#<xtlab_size>#,  # relative axis label magnification
  col="gray"                # axis color
);

# x-axis label
mtext(
  xAxisLabel,        # label
  font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,               # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<xlab_size>#,		# relative axis label magnification
  padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
  adj=#<xlab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);

# specify the y-axis
axis(
  2,                        # axis of interest, 1: below, 2: left, 3: above and 4: right
  at=y,                     # locations of tick marks
  labels=labelsY,            # tick labels on/off
  tick=TRUE,                # tick marks on/off
  tck=.01,                  # length of tick marks as a fraction of plot window
  las=#<ytlab_orient>#,	    # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<ytlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<ytlab_horiz>#,	    # axis label parallel location adjustment
  cex.axis=#<ytlab_size>#,  # relative axis label magnification
  col="gray" # axis color
);

# y-axis label
mtext(
  yAxisLabel,        # label
  font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=2,        # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<ylab_size>#,		# relative axis label magnification
  padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
  adj=#<ylab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);




# legend

legend(
  x="bottom", # x coordinate of legend
  legend, # vector of legend labels
  cex=#<legend_size>#, # relative magnification
  bty="#<legend_box>#", # legend box type - o: box, n: none
  adj=0, # string adjustment for text
  xpd=TRUE, # clipping - FALSE: plot region, TRUE: figure region, NA: device region
  ncol=1, # number of columns in legend
  inset=#<legend_inset>#, # inset distance from margin
  x.intersp=1, # horizontal character spacing factor
  y.intersp=.8 # vertical character spacing factor
);




# plot caption
mtext(
  "#<plot_caption>#",          # caption
  font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  col="#<caption_col>#",      # font color
  las=0,                      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,                      # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<caption_size>#,			  # relative magnification
  padj=#<caption_offset>#,		# axis perpendicular location adjustment
  adj=#<caption_align>#,			# axis parallel location adjustment
  line=1                      # margin line, starting at 0 counting outwards
);




if(addColorBar){
  par(xpd = NA)
  par(new = "TRUE",plt = c(0.85,0.9,0.19,0.88),las = 1,cex.axis = 1)
  filled.legend(x,y,z,xlab = "",ylab = "",xlim = c(min(x),max(x)),ylim = c(min(y),max(y)),
    zlim=zlim, color.palette = colorPalette, nlevels = contourIntervals)
}


dev.off()