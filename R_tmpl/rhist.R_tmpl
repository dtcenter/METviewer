setwd("#<r_work>#");
source("include/util_plot.R");



strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#

listColors		= #<colors>#;
		
boolGridOn		= #<grid_on>#;

boolNormalizedHistogram  = #<normalized_histogram>#;

listSeries1Val = #<series1_list>#;

listLegendUsr = #<legend>#;

listPlotDisp	= #<plot_disp>#;

listPlotOrderSeries	= #<order_series>#;

boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;
listFixedValEx = #<fix_val_list_eq>#;
boolDumpPoints1  = #<dump_points1>#;


#old warning status
oldWarn <- getOption("warn");


# read the plot data
options(warn=1)
dfData = read.delim(strDataFile, header=TRUE, row.names=NULL);

if( nrow(dfData) == 0 ){
  stop("ERROR: No data was found.");
}
if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
  intSeriesIndex=0;
  series = list();
}
# run event equalizer, if requested
if( FALSE != boolEventEqual  ){

  dfPlot = data.frame();
  #list all fixed variables
  listFixVars=c();
  listFixVarVals = c();
  if(length(listFixedValEx) > 0){
    for(index in 1:length(listFixedValEx)){
      if(is.null(listFixVars)){
        listFixVars = names(listFixedValEx[index]);
        listFixVarVals = permute(listFixedValEx[index]);
      }else{
        listFixVars =  append(listFixVars, names(listFixedValEx[index]));
        listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));

      }
    }
  }
  #add i_value
  unique_i_value=unique(dfData$i_value)
  matPerm = matrix(nrow=length(unique_i_value), ncol=1);
  matPerm[1:length(unique_i_value),] = unique_i_value;

  matPerm1 = matrix(nrow=1, ncol=length(unique_i_value));
  matPerm1[1,] = unique_i_value;

  if(is.null(listFixVars)){
    listFixVars = "i_value";
    listFixVarVals[[1]] = matPerm[,1];
  }else{
    listFixVars =  append(listFixVars, 'i_value');
    listFixVarVals [[length(listFixVarVals)+1]] =  matPerm[,1];
  }
  if(length(listSeries1Val) > 0){
    for(intPermVal in 1:nrow(matPermVal)){
      listPermVal = matPermVal[intPermVal,];
      dfPerm = dfData;
      for(intVar in 1:length(listSeriesVar)){
        valPerm = listPermVal[intVar];
        if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.integer(valPerm); }
        dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
        dfData_ee = eventEqualize(dfPerm, "fcst_valid_beg", NA, intVar, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        dfPlot = rbind(dfPlot, dfData_ee);
      }
    }
  }else{
    dfPlot = eventEqualize(dfData, "fcst_valid_beg", NA, list(), listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
  }
  dfData = dfPlot

}

#calculate sum
sum_by = list(i_value=dfData$i_value);
columns = c("i_value")
for(seriesVal in names(listSeries1Val)){
  sum_by[seriesVal]=dfData[seriesVal]
  columns = c(columns, seriesVal)
}
columns = c(columns, "stat_value")
dfData=setNames(aggregate(x=dfData$rank_i, by=sum_by, FUN=sum), columns)


legend=c();

if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
  intSeriesIndex=0;

  series = list();
  listX = unique(dfData$i_value);
  suffixesInd=1;
  for(intPermVal in 1:nrow(matPermVal)){
    seriesLegend="";
    listPermVal = matPermVal[intPermVal,];
    # build a data frame containing the permutation data
    dfPerm = dfData;
    for(intVar in 1:length(listSeriesVar)){
      valPerm = listPermVal[intVar];
      if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.integer(valPerm); }
      dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
      seriesLegend = paste(seriesLegend,valPerm);
    }
    seriesLegend = paste(seriesLegend,'Rank Histogram');
    legend=append(legend, seriesLegend);


    # if there is no data for this case, skip to the next permutation
    if( 1 > nrow(dfPerm) ){
      dfPerm=data.frame(i_value=listX, stat_value=rep(0, length(listX)) );
    }else{
      dfPerm = subset(dfPerm, select=c(i_value, stat_value));
    }
    if( intPermVal == 1){
      res = dfPerm;
    }else{
      res = merge(x=res, y=dfPerm, by="i_value", all=TRUE, suffixes=c("", paste(".",(suffixesInd), sep="")));
      suffixesInd=suffixesInd+1;
    }

  }
}else{
  res=dfData;
  legend=append(legend, 'Rank Histogram');
}

#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      legend[index]=listLegendUsr[index];
    }
  }
}

listHistData=vector();
listVisibleLegend=vector();
listVisibleColors=vector();
for(n in 2:length(names(res))){
  actualInd = listPlotOrderSeries[n-1];
  if(listPlotDisp[actualInd]){
    listHistData=rbind(listHistData,res[[actualInd+1]]);
    listVisibleLegend=append(listVisibleLegend, legend[actualInd]);
    listVisibleColors=append(listVisibleColors, listColors[actualInd]);
  }
}



if( boolNormalizedHistogram ){
  for(row in 1:nrow(listHistData)){
    listHistData[row,] = listHistData[row,] / sum( listHistData[row,], na.rm = TRUE  );
  }
}

listX = unique(dfData$i_value);


# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
  		strPlotFile,			# output file name, with appropriate extension
  		width=#<plot_width>#,	# width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		# resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		pointsize = 12,
  		quality = 100
  	);
} else {
  bitmap(
  		strPlotFile,			# output file name, with appropriate extension
  		type="#<plot_type>#",	# type of bitmap
  		width=#<plot_width>#,	# width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		# resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		taa=4,					# bits of anti-aliasing for graphics
  		gaa=4					# bits of anti-aliasing for text
  	);
}

# specify plot window formatting
par( 
	mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
	las=2, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	fg="black"
);

if( TRUE == boolDumpPoints1 ){
  strPointsFile = sub("\\.data$", ".points1", strDataFile, perl=TRUE);
  write.table(listHistData, file=strPointsFile, quote=FALSE, row.names=FALSE, col.names=FALSE);
}

# build the bar plot
barplot(
	listHistData,			# bar data 
	width = 1,				# vector of bar widths, recycled if necessary
	space = NULL,			# space left before each bar
	legend.text = listVisibleLegend, 	# vector of text used to construct a legend
	beside = TRUE,			# logical value indicating stacked or side-by-side bars - TRUE: side-by-side, FALSE: stacked
	horiz = FALSE,			# logical value indicating horizontal or vertical bars
	col = listVisibleColors,		# vector of box colors
	border = par("fg"),		# box border
	tcl=.1,					# tick mark length
	ylim=#<y1_lim>#,		# y axis limits
	names.arg=listX,		# vector of names used as x labels
	las=#<xtlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  args.legend = list(
    ncol=#<legend_ncol>#,			  # number of columns in legend
    x="bottom",
    inset=#<legend_inset>#,			# inset distance from margin
    x.intersp=1,                # horizontal character spacing factor
    y.intersp=.8					      # vertical character spacing factor
    )
);
box();

# plot title
mtext(
	"#<plot_title>#",		# label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		# relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# x-axis label
mtext(
	"#<x_label>#",			# label
	font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<xlab_size>#,		# relative axis label magnification
	padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
	adj=#<xlab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# y-axis label
mtext(
	"#<y1_label>#",			# label
	font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=2,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<ylab_size>#,		# relative axis label magnification
	padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
	adj=#<ylab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# add grid lines to the plot, if requested
if( TRUE == boolGridOn ){
	grid(
		lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
		col="#<grid_col>#",		# line color
		lwd=#<grid_lwd>#,		# line width
		nx=0,					# number of cells in x direction, NULL for default
		ny=NULL					# number of cells in y direction, NULL for default
	);
}

# plot caption
mtext(
	"#<plot_caption>#",			# caption
	font=#<caption_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",		# font color
	las=0, 						# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,						# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,		# relative magnification
	padj=#<caption_offset>#,	# axis label perpendicular location adjustment
	adj=#<caption_align>#,		# axis label parallel location adjustment
	line=1						# margin line, starting at 0 counting outwards
);

#<plot_cmd>#

invisible(dev.off());
